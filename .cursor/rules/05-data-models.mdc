---
description: 
globs: 
alwaysApply: false
---
# Nitify Data Models

This rule documents the core data models used in the Nitify restaurant growth dashboard, including their structure and relationships.

## Core Models

### User & Authentication

- **User**
  - Properties: id, email, name, role, createdAt, outlets
  - Path: `/lib/types/user.ts`
  - Authentication is handled via Next Auth

- **Role**
  - Properties: id, name, permissions
  - Path: `/lib/types/role.ts`
  - Roles: Owner, Manager, Staff

### Restaurant Data

- **Outlet**
  - Properties: id, name, type, address, cuisine, yearsFounded, seats, operatingHours
  - Path: `/lib/types/outlet.ts`
  - Relationships: belongs to User, has many ProfileAnswers

- **ProfileAnswer**
  - Properties: id, outletId, questionId, value, updatedAt
  - Path: `/lib/types/profile-answer.ts`
  - Stores answers to the 50-field master question bank

- **Question**
  - Properties: id, text, priority, type, defaultValue, validation, connectorSource
  - Path: `/lib/types/question.ts`
  - Types: numeric, text, select, multi-select, slider, toggle

### Integration Data

- **Connector**
  - Properties: id, type, outletId, status, credentials, lastSyncedAt
  - Path: `/lib/types/connector.ts`
  - Types: POS, Delivery, Loyalty, etc.

- **KPISnapshot**
  - Properties: id, outletId, date, metrics (JSON), source
  - Path: `/lib/types/kpi-snapshot.ts`
  - Stores time-series KPI data from integrations

### Strategy & Tasks

- **Room**
  - Properties: id, code, name, description, readiness, questions
  - Path: `/lib/types/room.ts`
  - Represents strategy rooms like "Boost Profits"

- **Strategy**
  - Properties: id, outletId, roomId, summary, issues, actions, quickCalcs, createdAt
  - Path: `/lib/types/strategy.ts`
  - Generated by AI based on outlet data

- **Task**
  - Properties: id, strategyId, title, description, status, dueDate, owner, completedAt
  - Path: `/lib/types/task.ts`
  - Statuses: todo, doing, done

- **Subtask**
  - Properties: id, taskId, title, status, dueDate, completedAt
  - Path: `/lib/types/subtask.ts`

## Zod Validation

All data models have corresponding Zod schemas for validation:

- `/lib/schemas/outlet.schema.ts`
- `/lib/schemas/profile-answer.schema.ts`
- etc.

## Data Relationships

The data relationships follow this pattern:

- User has many Outlets
- Outlet has many ProfileAnswers
- Outlet has many Connectors
- Outlet has many KPISnapshots
- Outlet has many Strategies
- Strategy has many Tasks
- Task has many Subtasks

## Data Flow

1. User creates an Outlet
2. User answers questions in the wizard (ProfileAnswers)
3. User connects integrations (Connectors)
4. System pulls KPI data (KPISnapshots)
5. User selects a Room
6. System generates a Strategy
7. Strategy creates Tasks and Subtasks
8. User completes Tasks
9. System tracks KPI changes

## Database Implementation

The data models are implemented using Prisma with PostgreSQL:

- Schema: `/prisma/schema.prisma`
- Client: `/lib/db.ts`
